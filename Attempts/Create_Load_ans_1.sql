--CREATE TABLES

CREATE TABLE LOCATION (
LOC_ID INTEGER,
CITY VARCHAR2(100),
STATE VARCHAR2(100),
COUNTRY VARCHAR2(100),
PRIMARY KEY (LOC_ID),
UNIQUE (CITY, STATE, COUNTRY)
);


CREATE TABLE FB_USER (
USER_ID VARCHAR2(100),
FIRST_NAME VARCHAR2(100) NOT NULL,
LAST_NAME VARCHAR(100) NOT NULL,
YEAR_OF_BIRTH INTEGER,
MONTH_OF_BIRTH INTEGER,
DAY_OF_BIRTH INTEGER,
GENDER CHAR(6),
HOMETOWN INTEGER,
CURRENT_LOCATION INTEGER,
PRIMARY KEY (USER_ID),
FOREIGN KEY (HOMETOWN) REFERENCES LOCATION,
FOREIGN KEY (CURRENT_LOCATION) REFERENCES LOCATION
);


CREATE TABLE EDU_PROGRAM (
PROGRAM_ID INTEGER,
INSTITUTION_NAME VARCHAR2(100),
PROGRAM_YEAR INTEGER,
PROGRAM_CONCENTRATION CHAR(100),
PROGRAM_DEGREE VARCHAR2(100),
PRIMARY KEY (PROGRAM_ID),
UNIQUE (INSTITUTION_NAME, PROGRAM_YEAR, PROGRAM_CONCENTRATION, PROGRAM_DEGREE)
);

CREATE TABLE USER_EDUCATION (
USER_ID VARCHAR2(100) NOT NULL,
PROGRAM_ID INTEGER NOT NULL,
FOREIGN KEY (USER_ID) REFERENCES FB_USER ON DELETE CASCADE,
FOREIGN KEY (PROGRAM_ID) REFERENCES EDU_PROGRAM
);

CREATE TABLE FRIENDSHIP (
USER1_ID VARCHAR2(100) NOT NULL,
USER2_ID VARCHAR2(100) NOT NULL,
FOREIGN KEY (USER1_ID) REFERENCES FB_USER ON DELETE CASCADE,
FOREIGN KEY (USER2_ID) REFERENCES FB_USER ON DELETE CASCADE,
UNIQUE (USER1_ID, USER2_ID)
);

CREATE TABLE PHOTO (
PHOTO_ID VARCHAR2(100),
PHOTO_CAPTION VARCHAR2(2000),



--LOAD TABLES

CREATE TABLE USER_SCHEMA AS (SELECT * FROM DANELIZA.PUBLIC_USER_INFORMATION);

CREATE TABLE FRIENDS_SCHEMA AS (SELECT * FROM DANELIZA.PUBLIC_ARE_FRIENDS);

CREATE TABLE PHOTO_SCHEMA AS (SELECT * FROM DANELIZA.PUBLIC_PHOTO_INFORMATION);

CREATE TABLE TAG_SCHEMA AS (SELECT * FROM DANELIZA.PUBLIC_TAG_INFORMATION);

CREATE TABLE EVENT_SCHEMA AS (SELECT * FROM DANELIZA.PUBLIC_EVENT_INFORMATION);

--LOCATION TRIGGER
CREATE SEQUENCE loc_sequence
START WITH 1 
INCREMENT BY 1; 
CREATE or replace TRIGGER loc_trigger 
BEFORE INSERT ON LOCATION 
FOR EACH ROW 
BEGIN 
SELECT loc_sequence.nextval into :new.LOC_ID from dual; 
END;
/

--COPY TO LOCATION TABLE
INSERT INTO LOCATION (CITY, STATE, COUNTRY) 
SELECT DISTINCT HOMETOWN_CITY, HOMETOWN_STATE, HOMETOWN_COUNTRY FROM 
USER_SCHEMA
UNION 
SELECT DISTINCT CURRENT_CITY, CURRENT_STATE, CURRENT_COUNTRY FROM 
USER_SCHEMA
UNION 
SELECT DISTINCT EVENT_CITY, EVENT_STATE, EVENT_COUNTRY FROM 
EVENT_SCHEMA; 


--INSERT TO USER TABLE
INSERT INTO FB_USER(USER_ID, FIRST_NAME, LAST_NAME,YEAR_OF_BIRTH, MONTH_OF_BIRTH,DAY_OF_BIRTH, GENDER,HOMETOWN,CURRENT_LOCATION) 
SELECT DISTINCT FB.USER_ID, FB.FIRST_NAME, FB.LAST_NAME, FB.YEAR_OF_BIRTH, FB.MONTH_OF_BIRTH, FB.DAY_OF_BIRTH, FB.GENDER, HM.LOC_ID, CUR.LOC_ID
FROM USER_SCHEMA FB, LOCATION HM, LOCATION CUR
WHERE FB.HOMETOWN_CITY = HM.CITY AND
      FB.HOMETOWN_STATE = HM.STATE AND
      FB.HOMETOWN_COUNTRY = HM.COUNTRY AND
      FB.CURRENT_CITY = CUR.CITY AND
      FB.CURRENT_STATE = CUR.STATE AND
      FB.CURRENT_COUNTRY = CUR.COUNTRY;

--EDUCATION TRIGGER
CREATE SEQUENCE edu_sequence 
START WITH 1 
INCREMENT BY 1;  
CREATE or replace TRIGGER edu_trigger 
BEFORE INSERT ON EDU_PROGRAM
FOR EACH ROW 





--DROP TABLES

DROP TABLE USER_EDUCATION;

DROP TABLE EDU_PROGRAM;

DROP TABLE FRIENDSHIP;

DROP TABLE ALBUM_PHOTOS;

DROP TABLE ALBUM;

DROP TABLE TAG;

DROP TABLE PHOTO_COMMENT;

DROP TABLE EVENT;

DROP TABLE PHOTO;

DROP TABLE FB_USER;

DROP TABLE LOCATION;



