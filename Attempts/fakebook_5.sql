--CREATE TABLES


--USER INFORMATION

CREATE TABLE LOCATION (
    LOC_ID              INTEGER,
    CITY                VARCHAR2(100),
    STATE               VARCHAR2(100),
    COUNTRY             VARCHAR2(100),
    PRIMARY KEY (LOC_ID),
    UNIQUE (CITY, STATE, COUNTRY)
);

CREATE TABLE PROFILE (
	USER_ID             VARCHAR2(100),
    FIRST_NAME          VARCHAR2(100) NOT NULL,
    LAST_NAME           VARCHAR2(100) NOT NULL,
    YEAR_OF_BIRTH       NUMBER(38),
    MONTH_OF_BIRTH      NUMBER(38),
    DAY_OF_BIRTH        NUMBER(38),
    GENDER              VARCHAR2(100),
    HOMETOWN_LOC_ID     INTEGER,
    CURRENT_LOC_ID      INTEGER,
	PRIMARY KEY (USER_ID),
    FOREIGN KEY (HOMETOWN_LOC_ID) REFERENCES LOCATION,
    FOREIGN KEY (CURRENT_LOC_ID) REFERENCES LOCATION
);

CREATE TABLE COLLEGE (
    PROG_ID             INTEGER,
    INSTITUTION_NAME    VARCHAR2(100),
    PROG_YEAR           NUMBER(38),
    PROG_CONCENTRATION  CHAR(100),
    PROG_DEGREE         VARCHAR2(100),
	PRIMARY KEY (PROG_ID),
    UNIQUE (INSTITUTION_NAME, PROG_YEAR, PROG_CONCENTRATION, PROG_DEGREE)
);

CREATE TABLE USER_COLLEGE (
    USER_ID             VARCHAR2(100),
    PROG_ID             INTEGER,
    PRIMARY KEY (USER_ID, PROG_ID),
    FOREIGN KEY (USER_ID) REFERENCES PROFILE,
    FOREIGN KEY (PROG_ID) REFERENCES COLLEGE
);

CREATE TABLE USER_FRIENDS (
    USER1_ID            VARCHAR2(100),
	USER2_ID    	    VARCHAR2(100),
	PRIMARY KEY (USER1_ID, USER2_ID), 
    FOREIGN KEY (USER1_ID) REFERENCES PROFILE,
    FOREIGN KEY (USER2_ID) REFERENCES PROFILE
);

CREATE TABLE USER_MESSAGE (
    SENDER_ID           VARCHAR2(100),
    RECEIVER_ID         VARCHAR2(100),
    SENT_TIME           TIMESTAMP(6),
    MESSAGE_CONTENT     VARCHAR(4000),
    PRIMARY KEY (SENDER_ID, RECEIVER_ID, SENT_TIME),
    FOREIGN KEY (SENDER_ID) REFERENCES PROFILE,
    FOREIGN KEY (RECEIVER_ID) REFERENCES PROFILE
);


--PHOTOS

CREATE TABLE PHOTO (
    PHOTO_ID			VARCHAR2(100),
    ALBUM_ID            VARCHAR2(100) NOT NULL,
    PHOTO_CAPTION		VARCHAR2(2000),
    PHOTO_CREATED_TIME	TIMESTAMP(6) NOT NULL,
    PHOTO_MODIFIED_TIME	TIMESTAMP(6) NOT NULL,
    PHOTO_LINK          VARCHAR2(2000) NOT NULL,
    PRIMARY KEY (PHOTO_ID)
);

CREATE TABLE ALBUM (
    ALBUM_ID			VARCHAR2(100),
    OWNER_ID			VARCHAR2(100) NOT NULL,
    COVER_PHOTO_ID      VARCHAR2(100) NOT NULL,
    ALBUM_NAME			VARCHAR2(100) NOT NULL,
    ALBUM_CREATED_TIME	TIMESTAMP(6) NOT NULL,
    ALBUM_MODIFIED_TIME	TIMESTAMP(6) NOT NULL,
    ALBUM_LINK		    VARCHAR2(2000) NOT NULL,
    ALBUM_VISIBILITY	VARCHAR2(100) NOT NULL,
    PRIMARY KEY (ALBUM_ID),
    FOREIGN KEY (ALBUM_ID) REFERENCES PHOTO,
    FOREIGN KEY (OWNER_ID) REFERENCES PROFILE,
    FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTO
);

CREATE TABLE PHOTO_TAG (
    PHOTO_ID			VARCHAR2(100),
    TAG_SUBJECT_ID 	    VARCHAR2(100),
    TAG_X_COORDINATE	NUMBER NOT NULL,
    TAG_Y_COORDINATE	NUMBER NOT NULL,
    PRIMARY KEY (PHOTO_ID, TAG_SUBJECT_ID),
    FOREIGN KEY (PHOTO_ID) REFERENCES PHOTO,
    FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES PROFILE
);

CREATE TABLE PHOTO_COMMENTS (
    PHOTO_ID            VARCHAR2(100),
    COMMENTOR_ID        VARCHAR2(100),
    COMMENT_TIME        TIMESTAMP(6),
    COMMENT_TEXT        VARCHAR2(4000),
    PRIMARY KEY (PHOTO_ID, COMMENTOR_ID),
    FOREIGN KEY (PHOTO_ID) REFERENCES PHOTO,
    FOREIGN KEY (COMMENTOR_ID) REFERENCES PROFILE
);


--EVENTS

CREATE TABLE EVENT (
    EVENT_ID			VARCHAR2(100),
    EVENT_CREATOR_ID	VARCHAR2(100),
    EVENT_NAME			VARCHAR2(100) NOT NULL,
    EVENT_TAGLINE		VARCHAR2(1000),
    EVENT_DESCRIPTION	VARCHAR2(4000),
    EVENT_HOST			VARCHAR2(100) NOT NULL,
    EVENT_TYPE			VARCHAR2(100) NOT NULL,
    EVENT_SUBTYPE		VARCHAR2(100) NOT NULL,
    EVENT_LOCATION 		VARCHAR2(200),
    EVENT_LOC_ID   		INTEGER,
    EVENT_START_TIME	TIMESTAMP(6) NOT NULL,
    EVENT_END_TIME 		TIMESTAMP(6) NOT NULL,
    PRIMARY KEY (EVENT_ID),
    FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES PROFILE,
    FOREIGN KEY (EVENT_LOC_ID) REFERENCES LOCATION
);

CREATE TABLE EVENT_PARTICIPANTS (
    EVENT_ID            VARCHAR(100),
    PARTICIPANT_ID      VARCHAR(100),
    CONFIRMATION_STATUS VARCHAR(100),
    PRIMARY KEY (EVENT_ID, PARTICIPANT_ID),
    FOREIGN KEY (EVENT_ID) REFERENCES EVENT,
    FOREIGN KEY (PARTICIPANT_ID) REFERENCES PROFILE
);



--LOAD TABLES

CREATE SEQUENCE LOC_SEQUENCE
START WITH 1
INCREMENT BY 1;
CREATE TRIGGER LOC_TRIGGER
BEFORE INSERT ON LOCATION
FOR EACH ROW
BEGIN
    SELECT LOC_SEQUENCE.NEXTVAL INTO :new.LOC_ID from dual;
END;
/

INSERT INTO LOCATION (CITY, STATE, COUNTRY)
SELECT DISTINCT HOMETOWN_CITY, HOMETOWN_STATE, HOMETOWN_COUNTRY FROM SHRAVYAK.PUBLIC_USER_INFORMATION
UNION 
SELECT DISTINCT CURRENT_CITY, CURRENT_STATE, CURRENT_COUNTRY FROM SHRAVYAK.PUBLIC_USER_INFORMATION
UNION 
SELECT DISTINCT EVENT_CITY, EVENT_STATE, EVENT_COUNTRY FROM SHRAVYAK.PUBLIC_EVENT_INFORMATION;


INSERT INTO PROFILE (USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRTH, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENDER, HOMETOWN_LOC_ID, CURRENT_LOC_ID)
SELECT DISTINCT LOAD_USER.USER_ID, LOAD_USER.FIRST_NAME, LOAD_USER.LAST_NAME, LOAD_USER.YEAR_OF_BIRTH, LOAD_USER.MONTH_OF_BIRTH, LOAD_USER.DAY_OF_BIRTH, LOAD_USER.GENDER, HOME.LOC_ID, CURR.LOC_ID 
FROM SHRAVYAK.PUBLIC_USER_INFORMATION LOAD_USER, LOCATION HOME, LOCATION CURR 
WHERE LOAD_USER.HOMETOWN_CITY = HOME.CITY 
AND LOAD_USER.HOMETOWN_STATE = HOME.STATE 
AND LOAD_USER.HOMETOWN_COUNTRY = HOME.COUNTRY 
AND LOAD_USER.CURRENT_CITY = CURR.CITY 
AND LOAD_USER.CURRENT_STATE = CURR.STATE 
AND LOAD_USER.CURRENT_COUNTRY = CURR.COUNTRY;


CREATE SEQUENCE PROG_SEQUENCE
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER PROG_TRIGGER
BEFORE INSERT ON COLLEGE
FOR EACH ROW
BEGIN
    SELECT PROG_SEQUENCE.NEXTVAL INTO :new.PROG_ID from dual;
END;
/

INSERT INTO COLLEGE (INSTITUTION_NAME, PROG_YEAR, PROG_CONCENTRATION, PROG_DEGREE)
SELECT DISTINCT INSTITUTION_NAME, PROGRAM_YEAR, PROGRAM_CONCENTRATION, PROGRAM_DEGREE FROM SHRAVYAK.PUBLIC_USER_INFORMATION;

INSERT INTO USER_COLLEGE (USER_ID, PROG_ID)
SELECT DISTINCT LOAD_USER.USER_ID, LOAD_EDU.PROG_ID 
FROM SHRAVYAK.PUBLIC_USER_INFORMATION LOAD_USER, COLLEGE LOAD_EDU
WHERE LOAD_USER.INSTITUTION_NAME = LOAD_EDU.INSTITUTION_NAME
AND LOAD_USER.PROGRAM_YEAR = LOAD_EDU.PROG_YEAR
AND LOAD_USER.PROGRAM_CONCENTRATION = LOAD_EDU.PROG_CONCENTRATION
AND LOAD_USER.PROGRAM_DEGREE = LOAD_EDU.PROG_DEGREE;

INSERT INTO USER_FRIENDS (USER1_ID, USER2_ID)
SELECT DISTINCT USER1_ID, USER2_ID FROM SHRAVYAK.PUBLIC_ARE_FRIENDS;


INSERT INTO PHOTO (PHOTO_ID, ALBUM_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK)
SELECT DISTINCT PHOTO_ID, ALBUM_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK FROM SHRAVYAK.PUBLIC_PHOTO_INFORMATION;


INSERT INTO ALBUM (ALBUM_ID, OWNER_ID, COVER_PHOTO_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY)
SELECT DISTINCT ALBUM_ID, OWNER_ID, COVER_PHOTO_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY FROM SHRAVYAK.PUBLIC_PHOTO_INFORMATION;


INSERT INTO PHOTO_TAG (PHOTO_ID, TAG_SUBJECT_ID, TAG_X_COORDINATE, TAG_Y_COORDINATE)
SELECT DISTINCT PHOTO_ID, TAG_SUBJECT_ID, TAG_X_COORDINATE, TAG_Y_COORDINATE FROM SHRAVYAK.PUBLIC_TAG_INFORMATION;


INSERT INTO EVENT (EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE, EVENT_LOCATION, EVENT_LOC_ID, EVENT_START_TIME, EVENT_END_TIME)
SELECT DISTINCT LOAD.EVENT_ID, LOAD.EVENT_CREATOR_ID, LOAD.EVENT_NAME, LOAD.EVENT_TAGLINE, LOAD.EVENT_DESCRIPTION, LOAD.EVENT_HOST, LOAD.EVENT_TYPE, LOAD.EVENT_SUBTYPE, LOAD.EVENT_LOCATION, LOC.LOC_ID, LOAD.EVENT_START_TIME, LOAD.EVENT_END_TIME
FROM SHRAVYAK.PUBLIC_EVENT_INFORMATION LOAD, LOCATION LOC
WHERE LOAD.EVENT_CITY = LOC.CITY
AND LOAD.EVENT_STATE = LOC.STATE
AND LOAD.EVENT_COUNTRY = LOC.COUNTRY;



--DROP TABLES


DROP TRIGGER PROG_TRIGGER;
DROP SEQUENCE PROG_SEQUENCE;

DROP TRIGGER LOC_TRIGGER;
DROP SEQUENCE LOC_SEQUENCE;

DROP TABLE EVENT_PARTICIPANTS;
DROP TABLE EVENT;

DROP TABLE PHOTO_COMMENTS;
DROP TABLE PHOTO_TAG;
DROP TABLE ALBUM;
DROP TABLE PHOTO;

DROP TABLE USER_MESSAGE;
DROP TABLE USER_FRIENDS;
DROP TABLE USER_COLLEGE;
DROP TABLE COLLEGE;
DROP TABLE PROFILE;
DROP TABLE LOCATION;


